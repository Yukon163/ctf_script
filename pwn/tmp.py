from base64 import *
import json
import yaml
import re

def get_data(file_url="url.txt"):
    with open(file_url, "w") as fo:
        data = ""
        decode1 = b64decode(data).decode('utf-8')
        # fo.write(decode1)

        for decode2 in decode1.split('\n'):
            decode2 = b64decode(decode2.replace("vmess://", "")).decode('utf-8')
            # print(decode2)
            fo.write("vmess://" + decode2)


def convert_vmess_to_yaml(vmess_list):
    proxies = []
    for vmess in vmess_list:
        vmess = vmess.strip()  # 去除空白字符
        if not vmess.startswith("vmess://"):
            print(f"Skipping invalid entry (does not start with vmess://): {vmess}")
            continue

        # 检查是否是无效的 "null" 或其他不合适的格式
        if vmess == "vmess://null":
            print(f"Skipping invalid vmess entry: {vmess}")
            continue

        # 解析vmess URL
        try:
            # 去掉 "vmess://" 前缀并解码
            decoded_data = json.loads(vmess[7:])  # 去掉 "vmess://"

            # 确保解码的数据包含必要的字段
            if all(key in decoded_data for key in
                   ["ps", "add", "port", "id", "aid", "net", "type", "host", "path", "tls", "sni"]):
                proxy = {
                    "name": decoded_data["ps"],
                    "server": decoded_data["add"],
                    "port": decoded_data["port"],
                    "uuid": decoded_data["id"],
                    "alterId": int(decoded_data["aid"]),
                    "network": decoded_data["net"],
                    "type": decoded_data["type"],
                    "host": decoded_data["host"],
                    "path": decoded_data["path"],
                    "tls": True if decoded_data["tls"] == "tls" else False,
                    "sni": decoded_data["sni"]
                }
                proxies.append(proxy)
            else:
                print(f"Missing necessary fields in entry: {vmess}")
        except (json.JSONDecodeError, KeyError) as e:
            print(f"Error decoding or missing key in vmess entry: {vmess} | Error: {e}")
    return proxies


# 读取vmess配置列表 (每一行是一个vmess链接)
def read_vmess_file(file_path):
    with open(file_path, 'r') as f:
        vmess_list = f.readlines()
    return vmess_list


# 写入YAML文件
def write_yaml_file(proxies, output_path):
    with open(output_path, 'w') as f:
        yaml.dump({"proxies": proxies}, f, default_flow_style=False, allow_unicode=True)


# 主函数
def main(input_file, output_file):
    vmess_list = read_vmess_file(input_file)
    proxies = convert_vmess_to_yaml(vmess_list)
    write_yaml_file(proxies, output_file)
    print(f"Converted YAML file has been saved to: {output_file}")


if __name__ == '__main__':
    input_file = "url.txt"
    get_data(input_file)
    output_file = "url.yaml"
    main(input_file, output_file)